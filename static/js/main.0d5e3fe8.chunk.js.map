{"version":3,"sources":["components/TodoItem.js","components/TodosList.js","components/Header.js","components/InputTodo.js","components/TodoContainer.js","index.js"],"names":["TodoItem","props","todo","completed","id","title","useEffect","alert","className","type","checked","onChange","handleChangeProps","onClick","deleteTodoProps","style","fontStyle","color","opacity","textDecoration","TodosList","todos","map","key","Header","isInitialMount","useRef","console","log","bgColor","Math","floor","random","current","document","getElementById","innerHTML","backgroundColor","headerSpan","headerStyle","padding","lineHeight","fontSize","marginBottom","InputTodo","useState","inputText","setInputText","onSubmit","e","preventDefault","addTodoProps","placeholder","value","name","target","TodoContainer","setTodos","show","setShow","axios","get","then","response","data","newTodo","uuid","v4","filter","ReactDOM","render"],"mappings":"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","file":"static/js/main.0d5e3fe8.chunk.js","sourcesContent":["// import React from \"react\";\r\n\r\n// class TodoItem extends React.Component {\r\n//   componentWillUnmount() {\r\n//     alert(\"Item about to be deleted!\");\r\n//   }\r\n\r\n//   render() {\r\n//     const completedStyle = {\r\n//       fontStyle: \"italic\",\r\n//       color: \"#d35e0f\",\r\n//       opacity: 0.4,\r\n//       textDecoration: \"line-through\"\r\n//     };\r\n\r\n//     const { completed, id, title } = this.props.todo;\r\n\r\n//     return (\r\n//       <li className=\"todo-item\">\r\n//         <input\r\n//           type=\"checkbox\"\r\n//           checked={completed}\r\n//           onChange={() => this.props.handleChangeProps(id)}\r\n//         />\r\n//         <button onClick={() => this.props.deleteTodoProps(id)}>Delete</button>\r\n//         <span style={completed ? completedStyle : null}>{title}</span>\r\n//       </li>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default TodoItem;\r\n\r\n\r\n//NOTE: Re-write it with React Hooks\r\n//We will check the componentWillUnmount and change it with useEffect\r\n\r\nimport React, {useEffect} from \"react\"\r\n\r\nconst TodoItem = props =>{\r\n  const completedStyle ={\r\n    fontStyle: \"italic\",\r\n    color: \"#d35e0f\",\r\n    opacity: 0.4,\r\n    textDecoration: \"line-through\",\r\n  }\r\n\r\n  const {completed, id, title} = props.todo\r\n\r\n  //when the component is about the unmount, return function will be called.\r\n  useEffect(() => {\r\n    return() => {\r\n      alert (\"About to be deleted. Are you sure?\")\r\n    }\r\n  }, [])\r\n\r\n  return(\r\n    <li className=\"todo-item\">\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={completed}\r\n        onChange={()=>props.handleChangeProps(id)}\r\n      />\r\n\r\n      <button onClick={()=> props.deleteTodoProps(id)}>DELETE</button>\r\n      <span style={completed ? completedStyle : null}>{title}</span>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default TodoItem","// import React from \"react\";\r\n// import TodoItem from \"./TodoItem\";\r\n\r\n// class TodosList extends React.Component {\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         {this.props.todos.map(todo => (\r\n//           <TodoItem\r\n//             key={todo.id}\r\n//             todo={todo}\r\n//             handleChangeProps={this.props.handleChangeProps}\r\n//             deleteTodoProps={this.props.deleteTodoProps}\r\n//           />\r\n//         ))}\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default TodosList;\r\n\r\n\r\n//NOTE: Re-written with React Hook. This component does not have state or lifecycle logic.\r\nimport React from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nconst TodosList = props =>{\r\n  return(\r\n    <div>\r\n      {props.todos.map(todo =>(\r\n        <TodoItem\r\n        key={todo.id}\r\n        todo={todo}\r\n        handleChangeProps={props.handleChangeProps}\r\n        deleteTodoProps={props.deleteTodoProps}\r\n        />\r\n      ))}\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodosList;","// import React, { Component } from \"react\";\r\n\r\n// class Header extends Component {\r\n//   componentDidUpdate(prevProps, prevState) {\r\n//     var x = Math.floor(Math.random() * 256);\r\n//     var y = Math.floor(Math.random() * 256);\r\n//     var z = Math.floor(Math.random() * 256);\r\n//     var bgColor = \"rgb(\" + x + \",\" + y + \",\" + z + \")\";\r\n\r\n//     if (prevProps.headerSpan !== this.props.headerSpan) {\r\n//       document.getElementById(\"inH1\").innerHTML = \"clicked\";\r\n//       document.getElementById(\"inH1\").style.backgroundColor = bgColor;\r\n//     }\r\n//   }\r\n\r\n//   render() {\r\n//     const headerStyle = {\r\n//       padding: \"20px 0\",\r\n//       lineHeight: \"2em\"\r\n//     };\r\n//     return (\r\n//       <header style={headerStyle}>\r\n//         <h1 style={{ fontSize: \"25px\", marginBottom: \"15px\" }}>\r\n//           Simple Todo App <span id=\"inH1\"></span>\r\n//         </h1>\r\n//         <p style={{ fontSize: \"19px\" }}>\r\n//           Please add to-dos item(s) through the input field\r\n//         </p>\r\n//       </header>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Header;\r\n\r\n\r\n//NOTE: Re-write it in React Hooks, we will check the componentDidMount\r\n\r\nimport React, {useEffect, useRef} from \"react\"\r\n\r\nconst Header =  props =>{\r\n  const headerStyle = {\r\n    padding: \"20px 0\",\r\n    lineHeight: \"2em\",\r\n  }\r\n\r\nconst isInitialMount = useRef(true);\r\nconsole.log(isInitialMount);\r\n\r\nuseEffect(() =>{\r\n    var x = Math.floor(Math.random() * 256);\r\n    var y = Math.floor(Math.random() * 256);\r\n    var z = Math.floor(Math.random() * 256);\r\n    var bgColor = \"rgb(\" + x + \",\" + y + \",\" + z + \")\";\r\n\r\n    if (isInitialMount.current){\r\n      isInitialMount.current=false;\r\n    }\r\n    else {\r\n    document.getElementById(\"inH1\").innerHTML = \"clicked\";\r\n    document.getElementById(\"inH1\").style.backgroundColor = bgColor;\r\n    }\r\n}, [props.headerSpan]);\r\n\r\n\r\n  return(\r\n    <header style={{headerStyle}}>\r\n      <h1 style={{fontSize:\"25px\", marginBottom: \"15px\"}}>\r\n        Simple Todo App <span id=\"inH1\" ></span>\r\n      </h1>\r\n\r\n      <p style={{fontSize: \"19px\"}} >\r\n        Please add to-dos items through the input field\r\n      </p>\r\n\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header","// import React, { Component } from \"react\";\r\n\r\n// class InputTodo extends Component {\r\n//   state = {\r\n//     title: \"\"\r\n//   };\r\n//   onChange = e => {\r\n//     this.setState({\r\n//       [e.target.name]: e.target.value\r\n//     });\r\n//   };\r\n\r\n//   handleSubmit = e => {\r\n//     e.preventDefault();\r\n//     this.props.addTodoProps(this.state.title);\r\n//     this.setState({\r\n//       title: \"\"\r\n//     });\r\n//   };\r\n//   render() {\r\n//     return (\r\n//       <form onSubmit={this.handleSubmit} className=\"form-container\">\r\n//         <input\r\n//           type=\"text\"\r\n//           className=\"input-text\"\r\n//           placeholder=\"Add todo...\"\r\n//           value={this.state.title}\r\n//           name=\"title\"\r\n//           onChange={this.onChange}\r\n//         />\r\n//         <input type=\"submit\" className=\"input-submit\" value=\"Submit\" />\r\n//       </form>\r\n//     );\r\n//   }\r\n// }\r\n// export default InputTodo;\r\n\r\n\r\n//NOTES:\r\n//Here we will create the same thing with using React Hooks, based on function instead of Class. We will use useState instead if state.\r\n// the useState Hook returns an array which ALWAYS contains two items. The first item is the current value passed-in (in our case, hello), and the second is a function that will allow us to update the value.\r\n//Unlike the class component, the state doesnâ€™t have to be an object. It can hold an array, number and string (as seen above).\r\n//We convert the class methods to function by adding the const keyword to them. With this simple change, you can call the function within the JSX without using this keyword.\r\nimport React, {useState} from \"react\"\r\n\r\nconst InputTodo = (props) =>{\r\n    const [inputText, setInputText] = useState({\r\n      title: \"\",\r\n    })\r\n\r\n  const onChange = e =>{\r\n    setInputText({\r\n      ...inputText,\r\n      [e.target.name]: e.target.value,\r\n    })\r\n  }\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    props.addTodoProps(inputText.title)\r\n    setInputText({\r\n      title: \"\",\r\n    })\r\n  }\r\n\r\n return(\r\n    <form onSubmit={handleSubmit} className=\"form-container\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"input-text\"\r\n        placeholder=\"Add todo...\"\r\n        value={inputText.title}\r\n        name=\"title\"\r\n        onChange={onChange}\r\n      />\r\n\r\n      <input type=\"submit\" className=\"input-submit\" value=\"Submit\"/>\r\n    </form>\r\n\r\n )\r\n\r\n}\r\n\r\nexport default InputTodo","// import React from \"react\";\r\n// import TodosList from \"./TodosList\";\r\n// import Header from \"./Header\";\r\n// import InputTodo from \"./InputTodo\";\r\n\r\n// import axios from \"axios\";\r\n// import uuid from \"uuid\";\r\n\r\n// class TodoContainer extends React.Component {\r\n//   state = {\r\n//     todos: [],\r\n//     show: false\r\n//   };\r\n\r\n//   handleChange = id => {\r\n//     this.setState({\r\n//       todos: this.state.todos.map(todo => {\r\n//         if (todo.id === id) {\r\n//           todo.completed = !todo.completed;\r\n//         }\r\n//         return todo;\r\n//       }),\r\n//       show: !this.state.show\r\n//     });\r\n//   };\r\n\r\n//   delTodo = id => {\r\n//     this.setState({\r\n//       todos: [\r\n//         ...this.state.todos.filter(todo => {\r\n//           return todo.id !== id;\r\n//         })\r\n//       ]\r\n//     });\r\n//   };\r\n\r\n//   addTodoItem = title => {\r\n//     const newTodo = {\r\n//       id: uuid.v4(),\r\n//       title: title,\r\n//       completed: false\r\n//     };\r\n//     this.setState({\r\n//       todos: [...this.state.todos, newTodo]\r\n//     });\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     axios\r\n//       .get(\"https://jsonplaceholder.typicode.com/todos?_limit=10\")\r\n//       .then(response => this.setState({ todos: response.data }));\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <div className=\"container\">\r\n//         <Header headerSpan={this.state.show} />\r\n//         <InputTodo addTodoProps={this.addTodoItem} />\r\n//         <TodosList\r\n//           todos={this.state.todos}\r\n//           handleChangeProps={this.handleChange}\r\n//           deleteTodoProps={this.delTodo}\r\n//         />\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n// export default TodoContainer;\r\n\r\n\r\n//NOTES:\r\n// We will rewrite the code with React Hooks \r\n\r\nimport React, {useState, useEffect} from \"react\"\r\nimport TodosList from \"./TodosList\"\r\nimport Header from \"./Header\"\r\nimport InputTodo from \"./InputTodo\"\r\n\r\nimport axios from \"axios\"\r\nimport uuid from \"uuid\"\r\n\r\n\r\n//we will replicate the lifecycle login in a function component. componentDidmount()\r\n// useState and useEffect Hook to replicate its logic in a function component.\r\nconst TodoContainer = props =>{\r\n  const [todos, setTodos] = useState([])\r\n  const [show, setShow] = useState([false])\r\n\r\n  const handleChange = id => {\r\n    setTodos(\r\n      todos.map(todo => {\r\n        if (todo.id === id){\r\n          todo.completed = !todo.completed\r\n        }\r\n        return todo\r\n      })\r\n    )\r\n      setShow(!show)\r\n  }\r\n\r\n  const delTodo = id => {\r\n    setTodos([\r\n      ...todos.filter(todo => {\r\n        return todo.id !== id\r\n      }),\r\n    ])\r\n  }\r\n\r\n  const addTodoItem = title => {\r\n    const newTodo = {\r\n      id: uuid.v4(),\r\n      title: title,\r\n      completed: false,\r\n    }\r\n    setTodos([...todos, newTodo])\r\n  }\r\n  \r\n  //We will make an HTTP request with using useEffect \r\n  //you can think of useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined.\r\n// Though, just like the useState Hook, you can also have multiple useEffect to separate unrelated logic.\r\n  useEffect (()=>{\r\n    console.log(\"Test run\")\r\n    axios\r\n      .get(\"https://jsonplaceholder.typicode.com/todos?_limit=10\")\r\n      .then(response =>setTodos(response.data))\r\n\r\n      //we have the equivalent of componentDidMount when the array is empty and componentDidUpdate when it includes variable(s) that will trigger re-rendering.\r\n      // Update the Hook to include the optional array: \r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Header headerSpan={show} />\r\n      <InputTodo addTodoProps={addTodoItem} />\r\n      <TodosList \r\n        todos={todos}\r\n        handleChangeProps = {handleChange}\r\n        deleteTodoProps = {delTodo}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoContainer\r\n\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n//component file\r\nimport TodoContainer from \"./components/TodoContainer\";\r\nimport \"./App.css\";\r\n\r\nReactDOM.render(<TodoContainer />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}